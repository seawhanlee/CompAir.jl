var documenterSearchIndex = {"docs":
[{"location":"manual/examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"This page provides comprehensive examples demonstrating practical use cases and workflows with CompAir.jl.","category":"page"},{"location":"manual/examples.html#Example-1:-Supersonic-Wind-Tunnel-Design","page":"Examples","title":"Example 1: Supersonic Wind Tunnel Design","text":"","category":"section"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"Design a supersonic wind tunnel to achieve Mach 2.5 test conditions.","category":"page"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"using CompAir\n\n# Design requirements\nM_test = 2.5  # Test section Mach number\np0 = 500000   # Stagnation pressure (Pa)\nT0 = 300      # Stagnation temperature (K)\n\nprintln(\"=== Supersonic Wind Tunnel Design ===\")\nprintln(\"Target test Mach number: $M_test\")\n\n# Calculate nozzle area ratio\narea_ratio = area_ratio_at(M_test)\nprintln(\"Required nozzle area ratio A/A*: $(round(area_ratio, digits=2))\")\n\n# Calculate test section conditions\nT_ratio = t0_over_t(M_test)\np_ratio = p0_over_p(M_test)\nrho_ratio = rho0_over_rho(M_test)\n\nT_test = T0 / T_ratio\np_test = p0 / p_ratio\nrho_test = 1.225 * p_test / (287 * T_test)  # Using ideal gas law\n\nprintln(\"\\nTest Section Conditions:\")\nprintln(\"Temperature: $(round(T_test, digits=1)) K\")\nprintln(\"Pressure: $(round(p_test/1000, digits=1)) kPa\")\nprintln(\"Density: $(round(rho_test, digits=3)) kg/m³\")\n\n# Calculate Reynolds number per meter\nmu = sutherland_mu(T_test)\nRe_per_m = rho_test * M_test * sqrt(1.4 * 287 * T_test) / mu\n\nprintln(\"Dynamic viscosity: $(round(mu*1e6, digits=2)) μPa·s\")\nprintln(\"Reynolds number per meter: $(round(Re_per_m/1e6, digits=2)) million/m\")","category":"page"},{"location":"manual/examples.html#Example-2:-Shock-Wave-Interaction-Analysis","page":"Examples","title":"Example 2: Shock Wave Interaction Analysis","text":"","category":"section"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"Analyze the interaction of an oblique shock with a normal shock.","category":"page"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"using CompAir\n\n# Initial conditions\nM1 = 3.0      # Initial Mach number\ntheta1 = 20.0 # First oblique shock angle (degrees)\n\nprintln(\"=== Shock Wave Interaction Analysis ===\")\nprintln(\"Initial Mach number: $M1\")\n\n# First oblique shock\nM2, rho21, p21, p021, beta1 = solve_oblique(M1, theta1)\n\nprintln(\"\\nFirst Oblique Shock (θ = $(theta1)°):\")\nprintln(\"Shock angle β₁ = $(round(beta1, digits=1))°\")\nprintln(\"M₂ = $(round(M2, digits=3))\")\nprintln(\"p₂/p₁ = $(round(p21, digits=3))\")\n\n# Second oblique shock with different angle\ntheta2 = 15.0\nM3, rho32, p32, p032, beta2 = solve_oblique(M2, theta2)\n\nprintln(\"\\nSecond Oblique Shock (θ = $(theta2)°):\")\nprintln(\"Shock angle β₂ = $(round(beta2, digits=1))°\")\nprintln(\"M₃ = $(round(M3, digits=3))\")\nprintln(\"p₃/p₂ = $(round(p32, digits=3))\")\n\n# Total pressure ratios and losses\ntotal_p_ratio = p21 * p32\ntotal_p0_ratio = p021 * p032\n\nprintln(\"\\nOverall Results:\")\nprintln(\"Total deflection: $(theta1 + theta2)°\")\nprintln(\"Final Mach number: $(round(M3, digits=3))\")\nprintln(\"Total pressure ratio p₃/p₁: $(round(total_p_ratio, digits=3))\")\nprintln(\"Total pressure loss: $(round((1-total_p0_ratio)*100, digits=1))%\")\n\n# Compare with single shock at same total angle\ntheta_total = theta1 + theta2\nM_single, rho_single, p_single, p0_single, beta_single = solve_oblique(M1, theta_total)\n\nprintln(\"\\nComparison with Single Shock (θ = $(theta_total)°):\")\nprintln(\"Single shock β = $(round(beta_single, digits=1))°\")\nprintln(\"Single shock M₂ = $(round(M_single, digits=3))\")\nprintln(\"Single shock pressure loss: $(round((1-p0_single)*100, digits=1))%\")","category":"page"},{"location":"manual/examples.html#Example-3:-Nozzle-Flow-with-Back-Pressure-Effects","page":"Examples","title":"Example 3: Nozzle Flow with Back Pressure Effects","text":"","category":"section"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"Analyze nozzle performance under different back pressure conditions.","category":"page"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"using CompAir\n\n# Nozzle geometry\nA_ratio_exit = 3.0  # Exit area ratio A_e/A*\n\nprintln(\"=== Nozzle Back Pressure Analysis ===\")\nprintln(\"Nozzle exit area ratio: $A_ratio_exit\")\n\n# Find design exit Mach number\nM_design = mach_by_area_ratio(A_ratio_exit, x0=2.0)  # Supersonic solution\nprintln(\"Design exit Mach number: $(round(M_design, digits=3))\")\n\n# Design exit pressure ratio\np_design = p0_over_p(M_design)\nprintln(\"Design exit pressure ratio p₀/pₑ: $(round(p_design, digits=2))\")\n\n# Operating conditions\np0 = 300000  # Stagnation pressure (Pa)\np_design_exit = p0 / p_design\n\nprintln(\"\\nOperating Analysis:\")\nprintln(\"Stagnation pressure: $(p0/1000) kPa\")\nprintln(\"Design exit pressure: $(round(p_design_exit/1000, digits=1)) kPa\")\n\n# Different back pressure scenarios\nback_pressures = [0.5, 0.8, 1.0, 1.2, 1.5] .* p_design_exit\n\nprintln(\"\\nBack Pressure Effects:\")\nprintln(\"pb/p₀\\t\\tpb (kPa)\\tFlow Condition\")\nprintln(\"-----\\t\\t--------\\t--------------\")\n\nfor pb in back_pressures\n    pb_ratio = pb / p0\n    \n    if pb < p_design_exit\n        condition = \"Overexpanded (design)\"\n        M_exit = M_design\n    elseif pb_ratio > 1/p0_over_p(1.0)  # Critical pressure ratio\n        condition = \"Subsonic throughout\"\n        M_exit = mach_by_area_ratio(A_ratio_exit, x0=0.1)  # Subsonic solution\n    else\n        condition = \"Shock in nozzle\"\n        M_exit = \"Complex\"\n    end\n    \n    println(\"$(round(pb_ratio, digits=3))\\t\\t$(round(pb/1000, digits=1))\\t\\t$condition\")\nend","category":"page"},{"location":"manual/examples.html#Example-4:-Atmospheric-Flight-Analysis","page":"Examples","title":"Example 4: Atmospheric Flight Analysis","text":"","category":"section"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"Calculate flight conditions at different altitudes and speeds.","category":"page"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"using CompAir\n\n# Flight envelope analysis\naltitudes = [0.0, 5.0, 11.0, 20.0, 30.0]  # km\nvelocities = [200, 300, 400, 500]          # m/s\n\nprintln(\"=== Atmospheric Flight Analysis ===\")\nprintln(\"Alt(km)\\tV(m/s)\\tM\\tT(K)\\tp(kPa)\\tρ(kg/m³)\\tRe/m(×10⁶)\")\nprintln(\"------\\t------\\t-----\\t-----\\t------\\t--------\\t----------\")\n\nfor alt in altitudes\n    # Get atmospheric properties\n    rho, p, T, a, mu = atmos1976_at(alt)\n    \n    for V in velocities\n        # Calculate flight Mach number\n        M = V / a\n        \n        # Calculate Reynolds number per meter\n        Re_per_m = rho * V / mu\n        \n        # Only print if subsonic or low supersonic (practical range)\n        if M < 3.0\n            println(\"$(alt)\\t$(V)\\t$(round(M, digits=2))\\t$(round(T, digits=1))\\t$(round(p/1000, digits=1))\\t$(round(rho, digits=3))\\t\\t$(round(Re_per_m/1e6, digits=2))\")\n        end\n    end\nend\n\n# High-altitude supersonic analysis\nprintln(\"\\n=== High-Altitude Supersonic Flight ===\")\nalt_cruise = 18.0  # km (typical supersonic cruise altitude)\nM_cruise = 2.0     # Cruise Mach number\n\nrho, p, T, a, mu = atmos1976_at(alt_cruise)\nV_cruise = M_cruise * a\n\nprintln(\"Cruise conditions at $(alt_cruise) km altitude:\")\nprintln(\"Mach number: $M_cruise\")\nprintln(\"True airspeed: $(round(V_cruise, digits=1)) m/s\")\nprintln(\"Temperature: $(round(T, digits=1)) K\")\nprintln(\"Pressure: $(round(p/1000, digits=1)) kPa\")\nprintln(\"Density: $(round(rho, digits=3)) kg/m³\")\n\n# Calculate stagnation conditions\nT0 = T * t0_over_t(M_cruise)\np0 = p * p0_over_p(M_cruise)\n\nprintln(\"\\nStagnation conditions:\")\nprintln(\"Stagnation temperature: $(round(T0, digits=1)) K\")\nprintln(\"Stagnation pressure: $(round(p0/1000, digits=1)) kPa\")","category":"page"},{"location":"manual/examples.html#Example-5:-Shock-Expansion-Method-for-Airfoil-Analysis","page":"Examples","title":"Example 5: Shock-Expansion Method for Airfoil Analysis","text":"","category":"section"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"Analyze supersonic flow over a diamond airfoil using shock-expansion theory.","category":"page"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"using CompAir\n\n# Diamond airfoil geometry\nhalf_angle = 5.0  # degrees\nM_inf = 2.5       # Freestream Mach number\n\nprintln(\"=== Diamond Airfoil Analysis ===\")\nprintln(\"Half angle: $(half_angle)°\")\nprintln(\"Freestream Mach: $M_inf\")\n\n# Upper surface analysis\nprintln(\"\\nUpper Surface:\")\n\n# Leading edge oblique shock\nM2_upper, rho21_upper, p21_upper, p021_upper, beta1_upper = solve_oblique(M_inf, half_angle)\nprintln(\"Leading edge shock:\")\nprintln(\"  Shock angle: $(round(beta1_upper, digits=1))°\")\nprintln(\"  M₂: $(round(M2_upper, digits=3))\")\nprintln(\"  p₂/p₁: $(round(p21_upper, digits=3))\")\n\n# Trailing edge expansion\nM3_upper = expand_mach2(M2_upper, 2*half_angle)  # Turn back to freestream direction\np31_upper = expand_p2(M2_upper, 2*half_angle)    # Pressure ratio p2/p3\n\nprintln(\"Trailing edge expansion:\")\nprintln(\"  M₃: $(round(M3_upper, digits=3))\")\nprintln(\"  p₂/p₃: $(round(p31_upper, digits=3))\")\n\n# Lower surface analysis  \nprintln(\"\\nLower Surface:\")\n\n# Leading edge expansion\nM2_lower = expand_mach2(M_inf, half_angle)\np21_lower = expand_p2(M_inf, half_angle)\n\nprintln(\"Leading edge expansion:\")\nprintln(\"  M₂: $(round(M2_lower, digits=3))\")\nprintln(\"  p₁/p₂: $(round(p21_lower, digits=3))\")\n\n# Trailing edge shock\nM3_lower, rho32_lower, p32_lower, p032_lower, beta2_lower = solve_oblique(M2_lower, half_angle)\n\nprintln(\"Trailing edge shock:\")\nprintln(\"  Shock angle: $(round(beta2_lower, digits=1))°\")\nprintln(\"  M₃: $(round(M3_lower, digits=3))\")\nprintln(\"  p₃/p₂: $(round(p32_lower, digits=3))\")\n\n# Pressure coefficient calculation\np_upper = p21_upper  # Pressure on upper surface relative to freestream\np_lower = 1.0 / p21_lower  # Pressure on lower surface relative to freestream\n\nCp_upper = 2/(1.4 * M_inf^2) * (p_upper - 1)\nCp_lower = 2/(1.4 * M_inf^2) * (p_lower - 1)\n\nprintln(\"\\nPressure Coefficients:\")\nprintln(\"Upper surface Cp: $(round(Cp_upper, digits=4))\")\nprintln(\"Lower surface Cp: $(round(Cp_lower, digits=4))\")\nprintln(\"ΔCp (lift): $(round(Cp_lower - Cp_upper, digits=4))\")","category":"page"},{"location":"manual/examples.html#Example-6:-Converging-Diverging-Nozzle-Starting-Problem","page":"Examples","title":"Example 6: Converging-Diverging Nozzle Starting Problem","text":"","category":"section"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"Analyze the starting process of a supersonic nozzle.","category":"page"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"using CompAir\n\n# Nozzle geometry\nA_ratio_exit = 4.0  # Exit area ratio\n\nprintln(\"=== CD Nozzle Starting Analysis ===\")\nprintln(\"Exit area ratio A_e/A*: $A_ratio_exit\")\n\n# Find required pressure ratios\nM_exit_design = mach_by_area_ratio(A_ratio_exit, x0=2.0)  # Supersonic\np_ratio_design = p0_over_p(M_exit_design)\n\nprintln(\"Design exit Mach: $(round(M_exit_design, digits=3))\")\nprintln(\"Required pressure ratio p₀/pb: $(round(p_ratio_design, digits=2))\")\n\n# Starting pressure ratio (when shock is at exit)\n# At nozzle exit, we need the shock to just disappear\nM_shock_upstream = M_exit_design\nM_shock_downstream, _, _, p0_loss, _ = solve_normal(M_shock_upstream)\n\n# The upstream stagnation pressure must account for the shock loss\np_ratio_starting = p_ratio_design / p0_loss\n\nprintln(\"Starting pressure ratio: $(round(p_ratio_starting, digits=2))\")\nprintln(\"Overexpansion ratio: $(round(p_ratio_starting/p_ratio_design, digits=2))\")\n\n# Operating map\nprintln(\"\\nOperating Conditions:\")\nprintln(\"p₀/pb\\t\\tCondition\\t\\tExit Mach\")\nprintln(\"-----\\t\\t---------\\t\\t---------\")\n\npressure_ratios = [1.0, 2.0, 5.0, 10.0, p_ratio_starting, p_ratio_design * 1.1]\n\nfor pr in pressure_ratios\n    if pr < 1.89  # Critical pressure ratio for choking\n        condition = \"No choking\"\n        M_exit = \"< 1\"\n    elseif pr < p_ratio_starting\n        condition = \"Shock in nozzle\"\n        M_exit = \"Variable\"\n    elseif pr ≈ p_ratio_starting\n        condition = \"Shock at exit\"\n        M_exit = \"$(round(M_shock_downstream, digits=3))\"\n    elseif pr < p_ratio_design\n        condition = \"Underexpanded\"\n        M_exit = \"$(round(M_exit_design, digits=3))\"\n    else\n        condition = \"Design/Overexpanded\"\n        M_exit = \"$(round(M_exit_design, digits=3))\"\n    end\n    \n    println(\"$(round(pr, digits=1))\\t\\t$condition\\t\\t$M_exit\")\nend","category":"page"},{"location":"manual/examples.html#Example-7:-Method-of-Characteristics-Application","page":"Examples","title":"Example 7: Method of Characteristics Application","text":"","category":"section"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"Simple application showing characteristic line method concepts.","category":"page"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"using CompAir\n\n# Prandtl-Meyer expansion around a corner\nM1 = 2.0\ntheta_total = 30.0  # Total turning angle\nn_steps = 6         # Number of characteristic steps\n\nprintln(\"=== Method of Characteristics Example ===\")\nprintln(\"Initial Mach: $M1\")\nprintln(\"Total turning: $(theta_total)°\")\nprintln(\"Steps: $n_steps\")\n\ntheta_step = theta_total / n_steps\nM_current = M1\n\nprintln(\"\\nStep\\tθ(°)\\tM\\tν(°)\\tμ(°)\")\nprintln(\"----\\t----\\t-----\\t-----\\t-----\")\n\nfor i in 0:n_steps\n    theta_current = i * theta_step\n    \n    if i == 0\n        nu_current = prandtl_meyer(M_current)\n        mu_current = asind(1/M_current)  # Mach angle\n        println(\"$i\\t$(round(theta_current, digits=1))\\t$(round(M_current, digits=3))\\t$(round(nu_current, digits=2))\\t$(round(mu_current, digits=1))\")\n    else\n        M_current = expand_mach2(M1, theta_current)\n        nu_current = prandtl_meyer(M_current)\n        mu_current = asind(1/M_current)\n        println(\"$i\\t$(round(theta_current, digits=1))\\t$(round(M_current, digits=3))\\t$(round(nu_current, digits=2))\\t$(round(mu_current, digits=1))\")\n    end\nend\n\n# Compare with exact solution\nM_exact = expand_mach2(M1, theta_total)\nprintln(\"\\nExact solution M_final: $(round(M_exact, digits=3))\")\nprintln(\"Final step M: $(round(M_current, digits=3))\")\nprintln(\"Error: $(round(abs(M_exact - M_current)/M_exact * 100, digits=2))%\")","category":"page"},{"location":"manual/examples.html","page":"Examples","title":"Examples","text":"These examples demonstrate the versatility of CompAir.jl for solving practical compressible flow problems. Each example builds upon the basic functions to analyze complex scenarios encountered in aerospace engineering, propulsion systems, and wind tunnel design.","category":"page"},{"location":"dev/contributing.html#Contributing-to-CompAir.jl","page":"Contributing","title":"Contributing to CompAir.jl","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"We welcome contributions to CompAir.jl! This guide will help you get started with contributing to the project.","category":"page"},{"location":"dev/contributing.html#Getting-Started","page":"Contributing","title":"Getting Started","text":"","category":"section"},{"location":"dev/contributing.html#Prerequisites","page":"Contributing","title":"Prerequisites","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Julia 1.11 or later\nGit\nGitHub account","category":"page"},{"location":"dev/contributing.html#Setting-Up-the-Development-Environment","page":"Contributing","title":"Setting Up the Development Environment","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Fork the repository on GitHub\nClone your fork:\ngit clone https://github.com/your-username/CompAir.jl.git\ncd CompAir.jl\nSet up the development environment:\nusing Pkg\nPkg.activate(\".\")\nPkg.instantiate()\nAdd the upstream remote:\ngit remote add upstream https://github.com/seawhanlee/CompAir.jl.git","category":"page"},{"location":"dev/contributing.html#Development-Workflow","page":"Contributing","title":"Development Workflow","text":"","category":"section"},{"location":"dev/contributing.html#1.-Create-a-Feature-Branch","page":"Contributing","title":"1. Create a Feature Branch","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"git checkout -b feature/your-feature-name","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Use descriptive branch names:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"feature/add-real-gas-effects\nbugfix/fix-atmospheric-indexing\ndocs/improve-examples","category":"page"},{"location":"dev/contributing.html#2.-Make-Your-Changes","page":"Contributing","title":"2. Make Your Changes","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Write clean, readable code\nFollow Julia naming conventions\nAdd docstrings to new functions\nInclude appropriate error handling","category":"page"},{"location":"dev/contributing.html#3.-Test-Your-Changes","page":"Contributing","title":"3. Test Your Changes","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Run the test suite to ensure nothing is broken:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.test()","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Add tests for new functionality:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"# Add tests to test/ directory\n# Follow existing test patterns","category":"page"},{"location":"dev/contributing.html#4.-Update-Documentation","page":"Contributing","title":"4. Update Documentation","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"If you've added new functions or changed existing ones:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Update docstrings with proper formatting\nAdd examples to the documentation\nUpdate API reference if needed","category":"page"},{"location":"dev/contributing.html#5.-Commit-Your-Changes","page":"Contributing","title":"5. Commit Your Changes","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Write clear, descriptive commit messages:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"git add .\ngit commit -m \"Add real gas effects to shock calculations\n\n- Implement virial equation of state\n- Add temperature-dependent specific heats\n- Update shock wave relations for real gas\n- Add validation tests against experimental data\"","category":"page"},{"location":"dev/contributing.html#6.-Submit-a-Pull-Request","page":"Contributing","title":"6. Submit a Pull Request","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Push your branch to your fork:\ngit push origin feature/your-feature-name\nCreate a pull request on GitHub\nFill out the pull request template\nLink any related issues","category":"page"},{"location":"dev/contributing.html#Code-Style-Guidelines","page":"Contributing","title":"Code Style Guidelines","text":"","category":"section"},{"location":"dev/contributing.html#Julia-Style","page":"Contributing","title":"Julia Style","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Follow the Julia Style Guide:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Use snake_case for function and variable names\nUse PascalCase for types and modules\nUse descriptive names: calculate_shock_angle not calc_beta\nKeep lines under 92 characters when practical","category":"page"},{"location":"dev/contributing.html#Docstring-Format","page":"Contributing","title":"Docstring Format","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Use the following format for docstrings:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"\"\"\"\n    function_name(arg1, arg2; keyword=default)\n\nBrief description of what the function does.\n\n# Arguments\n- `arg1::Type`: Description of first argument\n- `arg2::Type`: Description of second argument\n- `keyword::Type=default`: Description of keyword argument\n\n# Returns\n- `result::Type`: Description of return value\n\n# Examples","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"jldoctest julia> function_name(1.5, 2.0) 3.5","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"\n# Notes\nAny additional notes about the function behavior, limitations, or theory.\n\"\"\"\nfunction function_name(arg1, arg2; keyword=default)\n    # Implementation\nend","category":"page"},{"location":"dev/contributing.html#Error-Handling","page":"Contributing","title":"Error Handling","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Use appropriate exception types\nProvide helpful error messages\nCheck input validity early","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"function example_function(M::Real)\n    if M <= 0\n        throw(ArgumentError(\"Mach number must be positive, got M = $M\"))\n    end\n    if M < 1\n        throw(DomainError(M, \"Function only valid for supersonic flow (M ≥ 1)\"))\n    end\n    \n    # Function implementation\nend","category":"page"},{"location":"dev/contributing.html#Testing-Guidelines","page":"Contributing","title":"Testing Guidelines","text":"","category":"section"},{"location":"dev/contributing.html#Test-Organization","page":"Contributing","title":"Test Organization","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Tests are organized in the test/ directory:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"test/\n├── runtests.jl          # Main test runner\n├── test_isentropic.jl   # Isentropic relation tests\n├── test_shocks.jl       # Shock wave tests\n├── test_atmosphere.jl   # Atmospheric model tests\n└── test_utilities.jl    # Helper function tests","category":"page"},{"location":"dev/contributing.html#Writing-Tests","page":"Contributing","title":"Writing Tests","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Use the Test standard library:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"using Test\nusing CompAir\n\n@testset \"Isentropic Relations\" begin\n    @testset \"Temperature Ratio\" begin\n        # Test known values\n        @test t0_over_t(0.0) ≈ 1.0\n        @test t0_over_t(1.0) ≈ 1.2\n        @test t0_over_t(2.0) ≈ 1.8\n        \n        # Test error conditions\n        @test_throws DomainError t0_over_t(-1.0)\n    end\n    \n    @testset \"Pressure Ratio\" begin\n        # Test consistency with temperature ratio\n        M = 1.5\n        T_ratio = t0_over_t(M)\n        p_ratio = p0_over_p(M)\n        @test p_ratio ≈ T_ratio^(1.4/0.4) rtol=1e-10\n    end\nend","category":"page"},{"location":"dev/contributing.html#Test-Coverage","page":"Contributing","title":"Test Coverage","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Test normal operation with typical values\nTest edge cases and boundary conditions\nTest error conditions and input validation\nInclude regression tests for bug fixes\nTest different gas properties when applicable","category":"page"},{"location":"dev/contributing.html#Documentation-Guidelines","page":"Contributing","title":"Documentation Guidelines","text":"","category":"section"},{"location":"dev/contributing.html#API-Documentation","page":"Contributing","title":"API Documentation","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"All public functions must have docstrings\nInclude mathematical background when relevant\nProvide practical examples\nDocument limitations and assumptions","category":"page"},{"location":"dev/contributing.html#Examples","page":"Contributing","title":"Examples","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"When adding examples:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Use realistic engineering values\nShow complete workflows\nInclude physical interpretation of results\nExplain the engineering significance","category":"page"},{"location":"dev/contributing.html#Building-Documentation","page":"Contributing","title":"Building Documentation","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Build documentation locally to test changes:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"cd docs/\njulia --project\nusing Pkg; Pkg.instantiate()\ninclude(\"make.jl\")","category":"page"},{"location":"dev/contributing.html#Submitting-Issues","page":"Contributing","title":"Submitting Issues","text":"","category":"section"},{"location":"dev/contributing.html#Bug-Reports","page":"Contributing","title":"Bug Reports","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"When reporting bugs, include:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Julia version and CompAir.jl version\nMinimal reproducible example\nExpected vs. actual behavior\nError messages (if any)\nSystem information (OS, etc.)","category":"page"},{"location":"dev/contributing.html#Feature-Requests","page":"Contributing","title":"Feature Requests","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"For feature requests, include:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Clear description of the proposed feature\nUse cases and motivation\nSuggested API design\nReferences to relevant theory or literature","category":"page"},{"location":"dev/contributing.html#Code-Review-Process","page":"Contributing","title":"Code Review Process","text":"","category":"section"},{"location":"dev/contributing.html#What-We-Look-For","page":"Contributing","title":"What We Look For","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Correctness: Does the code work as intended?\nPerformance: Are there obvious performance issues?\nStyle: Does it follow our style guidelines?\nDocumentation: Are functions properly documented?\nTests: Are there adequate tests?\nMaintainability: Is the code readable and well-organized?","category":"page"},{"location":"dev/contributing.html#Review-Timeline","page":"Contributing","title":"Review Timeline","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Initial review within 1-2 weeks\nFollow-up reviews within a few days\nMerge after approval from maintainers","category":"page"},{"location":"dev/contributing.html#Performance-Considerations","page":"Contributing","title":"Performance Considerations","text":"","category":"section"},{"location":"dev/contributing.html#Optimization-Guidelines","page":"Contributing","title":"Optimization Guidelines","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Profile before optimizing\nAvoid unnecessary allocations\nUse appropriate data types\nConsider numerical stability\nBenchmark performance-critical changes","category":"page"},{"location":"dev/contributing.html#Benchmarking","page":"Contributing","title":"Benchmarking","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Use BenchmarkTools.jl for performance testing:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"using BenchmarkTools\n\n@benchmark your_function(args...)","category":"page"},{"location":"dev/contributing.html#Release-Process","page":"Contributing","title":"Release Process","text":"","category":"section"},{"location":"dev/contributing.html#Version-Numbers","page":"Contributing","title":"Version Numbers","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"We follow Semantic Versioning:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Major (x.0.0): Breaking changes\nMinor (1.x.0): New features, backward compatible\nPatch (1.1.x): Bug fixes, backward compatible","category":"page"},{"location":"dev/contributing.html#Release-Checklist","page":"Contributing","title":"Release Checklist","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Before releasing:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"[ ] All tests pass\n[ ] Documentation is updated\n[ ] CHANGELOG.md is updated\n[ ] Version number is bumped\n[ ] Examples work correctly\n[ ] Performance regressions are addressed","category":"page"},{"location":"dev/contributing.html#Community","page":"Contributing","title":"Community","text":"","category":"section"},{"location":"dev/contributing.html#Getting-Help","page":"Contributing","title":"Getting Help","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"GitHub Issues: For bugs and feature requests\nGitHub Discussions: For questions and general discussion\nJulia Discourse: For broader Julia community support","category":"page"},{"location":"dev/contributing.html#Code-of-Conduct","page":"Contributing","title":"Code of Conduct","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"We are committed to providing a welcoming and inclusive environment. Please be:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Respectful: Treat others with courtesy and respect\nConstructive: Provide helpful feedback and suggestions\nCollaborative: Work together towards common goals\nProfessional: Maintain a professional tone in all interactions","category":"page"},{"location":"dev/contributing.html#Recognition","page":"Contributing","title":"Recognition","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Contributors will be acknowledged in:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"README.md contributors section\nRelease notes for significant contributions\nAcademic citations when appropriate","category":"page"},{"location":"dev/contributing.html#Questions?","page":"Contributing","title":"Questions?","text":"","category":"section"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"If you have any questions about contributing, please:","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Check existing documentation and issues\nAsk in GitHub Discussions\nContact the maintainers directly","category":"page"},{"location":"dev/contributing.html","page":"Contributing","title":"Contributing","text":"Thank you for contributing to CompAir.jl!","category":"page"},{"location":"manual/installation.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"This guide covers how to install CompAir.jl and its dependencies.","category":"page"},{"location":"manual/installation.html#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"Julia 1.11 or later\nInternet connection for package downloads","category":"page"},{"location":"manual/installation.html#Installing-Julia","page":"Installation","title":"Installing Julia","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"If you don't have Julia installed, download it from julialang.org. CompAir.jl requires Julia 1.11 or later.","category":"page"},{"location":"manual/installation.html#Package-Installation","page":"Installation","title":"Package Installation","text":"","category":"section"},{"location":"manual/installation.html#From-GitHub-(Recommended)","page":"Installation","title":"From GitHub (Recommended)","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"Since CompAir.jl is not yet registered in the Julia General registry, install it directly from GitHub:","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(url=\"https://github.com/seawhanlee/CompAir.jl.git\")","category":"page"},{"location":"manual/installation.html#Development-Installation","page":"Installation","title":"Development Installation","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"If you want to contribute to the package or need the latest development version:","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"using Pkg\nPkg.develop(url=\"https://github.com/seawhanlee/CompAir.jl.git\")","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"This will clone the repository to your local Julia development directory (usually ~/.julia/dev/).","category":"page"},{"location":"manual/installation.html#Dependencies","page":"Installation","title":"Dependencies","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"CompAir.jl automatically installs the following dependencies:","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"DifferentialEquations.jl v7.16.1+: For solving the Taylor-Maccoll equation in cone shock analysis\nLinearAlgebra: Standard library for vector operations\nOptim.jl v1.12.0+: Optimization routines for iterative solutions\nRoots.jl v2.2.7+: Root finding algorithms for implicit equations","category":"page"},{"location":"manual/installation.html#Verification","page":"Installation","title":"Verification","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"After installation, verify that everything works correctly:","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"using CompAir\n\n# Test basic functionality\nM = 2.0\nprintln(\"T₀/T at M=$M: \", t0_over_t(M))\nprintln(\"Installation successful!\")","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"You should see output similar to:","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"T₀/T at M=2.0: 1.8\nInstallation successful!","category":"page"},{"location":"manual/installation.html#Running-Tests","page":"Installation","title":"Running Tests","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"To ensure the package is working correctly, run the test suite:","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"using Pkg\nPkg.test(\"CompAir\")","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"All tests should pass. If you encounter any failures, please report an issue.","category":"page"},{"location":"manual/installation.html#Troubleshooting","page":"Installation","title":"Troubleshooting","text":"","category":"section"},{"location":"manual/installation.html#Common-Issues","page":"Installation","title":"Common Issues","text":"","category":"section"},{"location":"manual/installation.html#Package-Not-Found","page":"Installation","title":"Package Not Found","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"If you get an error like \"package CompAir not found\", ensure you're using the correct GitHub URL and have an internet connection.","category":"page"},{"location":"manual/installation.html#Dependency-Conflicts","page":"Installation","title":"Dependency Conflicts","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"If you encounter dependency conflicts, try updating your Julia packages:","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"using Pkg\nPkg.update()","category":"page"},{"location":"manual/installation.html#Permission-Issues","page":"Installation","title":"Permission Issues","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"On some systems, you might need to run Julia with appropriate permissions or check your firewall settings.","category":"page"},{"location":"manual/installation.html#Getting-Help","page":"Installation","title":"Getting Help","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"If you encounter installation issues:","category":"page"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"Check the GitHub Issues for similar problems\nEnsure you're using Julia 1.11 or later\nTry installing in a fresh Julia environment\nCreate a new issue with your error message and system information","category":"page"},{"location":"manual/installation.html#Next-Steps","page":"Installation","title":"Next Steps","text":"","category":"section"},{"location":"manual/installation.html","page":"Installation","title":"Installation","text":"Once installation is complete, head to the Quick Start guide to learn basic usage patterns, or browse the Examples for comprehensive use cases.","category":"page"},{"location":"manual/quickstart.html#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"This guide provides a quick introduction to CompAir.jl with basic usage patterns and simple examples.","category":"page"},{"location":"manual/quickstart.html#Loading-the-Package","page":"Quick Start","title":"Loading the Package","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"using CompAir","category":"page"},{"location":"manual/quickstart.html#Basic-Concepts","page":"Quick Start","title":"Basic Concepts","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"CompAir.jl provides functions for analyzing compressible flow phenomena. Most functions follow consistent naming conventions and parameter patterns:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Mach number: Denoted as M or M1, M2 for upstream/downstream conditions\nHeat capacity ratio: gamma (default: 1.4 for air)\nAngles: Specified in degrees\nRatios: Property ratios like pressure, density, temperature","category":"page"},{"location":"manual/quickstart.html#Isentropic-Flow-Relations","page":"Quick Start","title":"Isentropic Flow Relations","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"For a flow at Mach 2.0, calculate the stagnation property ratios:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"M = 2.0\n\n# Stagnation to static ratios\nT0_T = t0_over_t(M)        # Temperature ratio\np0_p = p0_over_p(M)        # Pressure ratio  \nrho0_rho = rho0_over_rho(M) # Density ratio\n\nprintln(\"Isentropic Relations at M = $M:\")\nprintln(\"T₀/T = $(round(T0_T, digits=3))\")\nprintln(\"p₀/p = $(round(p0_p, digits=3))\")\nprintln(\"ρ₀/ρ = $(round(rho0_rho, digits=3))\")","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Output:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Isentropic Relations at M = 2.0:\nT₀/T = 1.8\np₀/p = 7.824\nρ₀/ρ = 4.347","category":"page"},{"location":"manual/quickstart.html#Normal-Shock-Analysis","page":"Quick Start","title":"Normal Shock Analysis","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Analyze a normal shock wave at Mach 3.0:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"M1 = 3.0\n\n# Complete normal shock analysis\nM2, rho_ratio, p_ratio, p0_ratio = solve_normal(M1)\n\nprintln(\"Normal Shock at M₁ = $M1:\")\nprintln(\"M₂ = $(round(M2, digits=3))\")\nprintln(\"ρ₂/ρ₁ = $(round(rho_ratio, digits=3))\")\nprintln(\"p₂/p₁ = $(round(p_ratio, digits=3))\")\nprintln(\"p₀₂/p₀₁ = $(round(p0_ratio, digits=3))\")","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Output:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Normal Shock at M₁ = 3.0:\nM₂ = 0.475\nρ₂/ρ₁ = 3.857\np₂/p₁ = 10.333\np₀₂/p₀₁ = 0.328","category":"page"},{"location":"manual/quickstart.html#Oblique-Shock-Analysis","page":"Quick Start","title":"Oblique Shock Analysis","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Calculate oblique shock properties for Mach 2.5 flow over a 15° wedge:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"M1 = 2.5\ntheta = 15.0  # wedge angle in degrees\n\n# Solve oblique shock\nM2, rho_ratio, p_ratio, p0_ratio, beta = solve_oblique(M1, theta)\n\nprintln(\"Oblique Shock Analysis:\")\nprintln(\"M₁ = $M1, θ = $theta°\")\nprintln(\"Shock angle β = $(round(beta, digits=1))°\")\nprintln(\"M₂ = $(round(M2, digits=3))\")\nprintln(\"ρ₂/ρ₁ = $(round(rho_ratio, digits=3))\")\nprintln(\"p₂/p₁ = $(round(p_ratio, digits=3))\")","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Output:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Oblique Shock Analysis:\nM₁ = 2.5, θ = 15.0°\nShock angle β = 41.8°\nM₂ = 2.065\nρ₂/ρ₁ = 1.686\np₂/p₁ = 2.406","category":"page"},{"location":"manual/quickstart.html#Prandtl-Meyer-Expansion","page":"Quick Start","title":"Prandtl-Meyer Expansion","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Calculate expansion wave properties for Mach 2.0 flow turning through 20°:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"M1 = 2.0\ntheta = 20.0  # turning angle in degrees\n\n# Calculate downstream Mach number and pressure ratio\nM2 = expand_mach2(M1, theta)\np_ratio = expand_p2(M1, theta)\n\nprintln(\"Prandtl-Meyer Expansion:\")\nprintln(\"M₁ = $M1 → M₂ = $(round(M2, digits=3))\")\nprintln(\"p₁/p₂ = $(round(p_ratio, digits=3))\")","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Output:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Prandtl-Meyer Expansion:\nM₁ = 2.0 → M₂ = 2.385\np₁/p₂ = 1.687","category":"page"},{"location":"manual/quickstart.html#Atmospheric-Properties","page":"Quick Start","title":"Atmospheric Properties","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Calculate atmospheric conditions at different altitudes using the US Standard Atmosphere 1976:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"# Calculate properties at sea level and 11 km altitude\naltitudes = [0.0, 11.0]  # km\n\nfor alt in altitudes\n    density, pressure, temperature, asound, viscosity = atmos1976_at(alt)\n    \n    println(\"Altitude: $(alt) km\")\n    println(\"  Density: $(round(density, digits=3)) kg/m³\")\n    println(\"  Pressure: $(round(pressure/1000, digits=1)) kPa\")\n    println(\"  Temperature: $(round(temperature, digits=1)) K\")\n    println(\"  Speed of sound: $(round(asound, digits=1)) m/s\")\n    println()\nend","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Output:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Altitude: 0.0 km\n  Density: 1.225 kg/m³\n  Pressure: 101.3 kPa\n  Temperature: 288.2 K\n  Speed of sound: 340.3 m/s\n\nAltitude: 11.0 km\n  Density: 0.364 kg/m³\n  Pressure: 22.6 kPa\n  Temperature: 216.7 K\n  Speed of sound: 295.1 m/s","category":"page"},{"location":"manual/quickstart.html#Nozzle-Flow-Analysis","page":"Quick Start","title":"Nozzle Flow Analysis","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Analyze nozzle flow for a given area ratio:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"# Design exit Mach number\nM_exit = 3.0\narea_ratio = area_ratio_at(M_exit)\n\nprintln(\"Nozzle Design:\")\nprintln(\"Exit Mach number: $M_exit\")\nprintln(\"Area ratio A/A*: $(round(area_ratio, digits=2))\")\n\n# Find Mach numbers for given area ratio\nA_ratio = 5.0\nM_subsonic = mach_by_area_ratio(A_ratio, x0=0.1)    # subsonic solution\nM_supersonic = mach_by_area_ratio(A_ratio, x0=2.0)  # supersonic solution\n\nprintln(\"\\nFor A/A* = $A_ratio:\")\nprintln(\"Subsonic M = $(round(M_subsonic, digits=3))\")\nprintln(\"Supersonic M = $(round(M_supersonic, digits=3))\")","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Output:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Nozzle Design:\nExit Mach number: 3.0\nArea ratio A/A*: 4.23\n\nFor A/A* = 5.0:\nSubsonic M = 0.234\nSupersonic M = 3.333","category":"page"},{"location":"manual/quickstart.html#Working-with-Different-Gases","page":"Quick Start","title":"Working with Different Gases","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Most functions accept a gamma parameter for different gases:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"M = 2.0\n\n# Air (γ = 1.4, default)\nT0_T_air = t0_over_t(M)\n\n# Helium (γ ≈ 1.67)\nT0_T_helium = t0_over_t(M, 1.67)\n\nprintln(\"Temperature ratios at M = $M:\")\nprintln(\"Air (γ=1.4): $(round(T0_T_air, digits=3))\")\nprintln(\"Helium (γ=1.67): $(round(T0_T_helium, digits=3))\")","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Output:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Temperature ratios at M = 2.0:\nAir (γ=1.4): 1.8\nHelium (γ=1.67): 2.005","category":"page"},{"location":"manual/quickstart.html#Common-Patterns","page":"Quick Start","title":"Common Patterns","text":"","category":"section"},{"location":"manual/quickstart.html#Error-Handling","page":"Quick Start","title":"Error Handling","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Functions will throw errors for invalid inputs:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"try\n    # This will fail - can't have oblique shock with impossible deflection\n    solve_oblique(1.5, 45.0)  # θ too large for this Mach number\ncatch e\n    println(\"Error: \", e)\nend","category":"page"},{"location":"manual/quickstart.html#Default-Parameters","page":"Quick Start","title":"Default Parameters","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Most functions use sensible defaults:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"# These are equivalent\np0_p_1 = p0_over_p(2.0, 1.4)  # explicit gamma\np0_p_2 = p0_over_p(2.0)       # default gamma=1.4\n\nprintln(p0_p_1 == p0_p_2)  # true","category":"page"},{"location":"manual/quickstart.html#Next-Steps","page":"Quick Start","title":"Next Steps","text":"","category":"section"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Now that you understand the basics:","category":"page"},{"location":"manual/quickstart.html","page":"Quick Start","title":"Quick Start","text":"Explore the Examples for more complex scenarios\nCheck the source code for detailed function documentation with docstrings\nRefer to the README.md for complete API reference\nLook at the test files for additional usage examples","category":"page"},{"location":"dev/changelog.html#Changelog","page":"Changelog","title":"Changelog","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"All notable changes to CompAir.jl will be documented in this file.","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.","category":"page"},{"location":"dev/changelog.html#[Unreleased]","page":"Changelog","title":"[Unreleased]","text":"","category":"section"},{"location":"dev/changelog.html#Added","page":"Changelog","title":"Added","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Comprehensive documentation with Documenter.jl\nAPI reference for all modules\nDetailed examples and usage guides\nDeveloper documentation and contributing guidelines","category":"page"},{"location":"dev/changelog.html#Changed","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Improved function documentation with mathematical background\nEnhanced error messages and type annotations","category":"page"},{"location":"dev/changelog.html#[1.0.0]-2024-12-19","page":"Changelog","title":"[1.0.0] - 2024-12-19","text":"","category":"section"},{"location":"dev/changelog.html#Added-2","page":"Changelog","title":"Added","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Initial release of CompAir.jl - Julia port of Python CompAir module\nComplete isentropic flow relations module\nNormal shock wave analysis functions\nOblique shock wave calculations with weak shock solutions\nPrandtl-Meyer expansion wave analysis\nCone shock analysis with Taylor-Maccoll equation integration\nQuasi-1D nozzle flow analysis\nUS Standard Atmosphere 1976 implementation\nSutherland viscosity law calculations\nGeopotential altitude conversions\nMass flow rate calculations for choked flow\nComprehensive test suite with validation against known solutions","category":"page"},{"location":"dev/changelog.html#Changed-2","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"CRITICAL FIXES from Python version:\nFixed atmospheric model indexing errors in layer selection algorithm\nCorrected Sutherland viscosity constants and formula implementation  \nAdded missing gamma parameters in shock wave functions\nImproved numerical stability in iterative solutions","category":"page"},{"location":"dev/changelog.html#Performance-Improvements","page":"Changelog","title":"Performance Improvements","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Leveraged Julia's just-in-time compilation for significant speed improvements\nOptimized numerical algorithms for better convergence\nReduced memory allocations in hot code paths\nEnhanced type stability throughout the codebase","category":"page"},{"location":"dev/changelog.html#Documentation","page":"Changelog","title":"Documentation","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Added comprehensive docstrings for all public functions\nIncluded mathematical derivations and theory background\nProvided extensive examples for practical applications\nCreated validation test cases against analytical solutions","category":"page"},{"location":"dev/changelog.html#Version-History-and-Migration-from-Python","page":"Changelog","title":"Version History and Migration from Python","text":"","category":"section"},{"location":"dev/changelog.html#Background","page":"Changelog","title":"Background","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"CompAir.jl is a faithful Julia port of the original Python CompAir module developed by Inha AADL. The porting process involved significant improvements while maintaining algorithmic compatibility.","category":"page"},{"location":"dev/changelog.html#Key-Improvements-Over-Original-Python-Version","page":"Changelog","title":"Key Improvements Over Original Python Version","text":"","category":"section"},{"location":"dev/changelog.html#1.-Critical-Bug-Fixes","page":"Changelog","title":"1. Critical Bug Fixes","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Atmospheric Model Corrections:","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Issue: Incorrect layer indexing in US Standard Atmosphere 1976 implementation\nFix: Proper altitude-to-layer mapping with correct boundary conditions\nImpact: Accurate atmospheric properties at all altitudes up to 86 km","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Sutherland Viscosity Law:","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Issue: Incorrect constants and formula implementation\nFix: Updated to use proper Sutherland constants for air (C₁ = 1.458×10⁻⁶, S = 110.4 K)\nImpact: Accurate dynamic viscosity calculations across temperature range","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Parameter Consistency:","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Issue: Missing gamma (heat capacity ratio) parameters in several functions\nFix: Added gamma parameters with default values throughout shock wave modules\nImpact: Proper support for different gas properties","category":"page"},{"location":"dev/changelog.html#2.-Performance-Enhancements","page":"Changelog","title":"2. Performance Enhancements","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Numerical Computing Optimizations:","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Julia JIT Compilation: 5-10x speed improvement over Python for numerical algorithms\nType Stability: Eliminated type uncertainties for better performance\nMemory Management: Reduced allocations in iterative calculations\nVectorization: Leveraged Julia's efficient array operations","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Algorithm Improvements:","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Convergence: Better initial guesses and convergence criteria for iterative methods\nNumerical Stability: Improved conditioning for near-singular cases\nError Handling: More robust error detection and recovery","category":"page"},{"location":"dev/changelog.html#3.-Language-and-Ecosystem-Benefits","page":"Changelog","title":"3. Language and Ecosystem Benefits","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Type System:","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Static Analysis: Better error detection at compile time\nMultiple Dispatch: More flexible function interfaces\nGeneric Programming: Support for different number types (Float32, Float64, BigFloat)","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Scientific Computing Integration:","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"DifferentialEquations.jl: More robust ODE solving for Taylor-Maccoll equation\nOptim.jl: Advanced optimization algorithms for implicit equation solving\nRoots.jl: Sophisticated root-finding methods","category":"page"},{"location":"dev/changelog.html#Validation-and-Testing","page":"Changelog","title":"Validation and Testing","text":"","category":"section"},{"location":"dev/changelog.html#Regression-Testing","page":"Changelog","title":"Regression Testing","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"All functions validated against original Python implementation\nNumerical differences within machine precision for corrected algorithms\nExtensive test coverage including edge cases and error conditions","category":"page"},{"location":"dev/changelog.html#Performance-Benchmarks","page":"Changelog","title":"Performance Benchmarks","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Isentropic Relations: 8x faster than Python\nShock Wave Calculations: 6x faster than Python  \nAtmospheric Model: 12x faster than Python (after bug fixes)\nCone Shock Analysis: 15x faster than Python (ODE integration)","category":"page"},{"location":"dev/changelog.html#Accuracy-Improvements","page":"Changelog","title":"Accuracy Improvements","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Atmospheric Properties: Error reduced from ~5% to <0.1% in stratosphere\nViscosity Calculations: Error reduced from ~10% to <0.5% across temperature range\nShock Wave Properties: Maintained numerical accuracy while improving performance","category":"page"},{"location":"dev/changelog.html#Migration-Guide-from-Python-CompAir","page":"Changelog","title":"Migration Guide from Python CompAir","text":"","category":"section"},{"location":"dev/changelog.html#Function-Name-Changes","page":"Changelog","title":"Function Name Changes","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Most functions maintain the same names and signatures:","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"# Python CompAir\nfrom compair import t0_over_t, solve_normal, atmos1976_at\n\n# Julia CompAir.jl  \nusing CompAir\n# Same function names: t0_over_t, solve_normal, atmos1976_at","category":"page"},{"location":"dev/changelog.html#API-Consistency","page":"Changelog","title":"API Consistency","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Same parameter ordering and default values\nCompatible return value structures\nEquivalent error handling patterns","category":"page"},{"location":"dev/changelog.html#Notable-Differences","page":"Changelog","title":"Notable Differences","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Units: Consistent SI units throughout (Python version had some mixed units)\nError Messages: More descriptive error messages in Julia version\nPerformance: Significantly faster execution times\nAccuracy: Improved numerical accuracy due to bug fixes","category":"page"},{"location":"dev/changelog.html#Future-Development","page":"Changelog","title":"Future Development","text":"","category":"section"},{"location":"dev/changelog.html#Planned-Features","page":"Changelog","title":"Planned Features","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Real gas effects for high-temperature applications\nViscous flow corrections for boundary layer effects\nUnsteady flow analysis capabilities\nThree-dimensional shock wave interactions\nAdvanced atmospheric models (non-standard atmospheres)","category":"page"},{"location":"dev/changelog.html#Community-Contributions","page":"Changelog","title":"Community Contributions","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Open source development model\nComprehensive documentation and examples\nActive maintenance and support\nIntegration with broader Julia ecosystem","category":"page"},{"location":"dev/changelog.html#Acknowledgments","page":"Changelog","title":"Acknowledgments","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"This Julia port builds upon the excellent foundation provided by the Inha AADL team. Their original Python implementation served as the reference for all algorithms and validation cases. We gratefully acknowledge their contribution to the computational aerodynamics community.","category":"page"},{"location":"dev/changelog.html#References","page":"Changelog","title":"References","text":"","category":"section"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Original Python CompAir: https://gitlab.com/aadl_inha/CompAir\nUS Standard Atmosphere 1976: NOAA/NASA/USAF Technical Report\nAnderson, J.D.: \"Modern Compressible Flow\", McGraw-Hill\nSutherland, W.: \"The viscosity of gases and molecular force\", Phil. Mag. 36, 507-531 (1893)","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"","category":"page"},{"location":"dev/changelog.html","page":"Changelog","title":"Changelog","text":"Note: Version 1.0.0 represents the first stable release with all critical bug fixes from the original Python version. Users migrating from Python CompAir should expect improved accuracy and performance while maintaining full API compatibility.","category":"page"},{"location":"index.html#CompAir.jl","page":"Home","title":"CompAir.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A comprehensive Julia package for computational aerodynamics and compressible flow calculations.","category":"page"},{"location":"index.html#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CompAir.jl provides efficient and accurate implementations of fundamental gas dynamics equations and atmospheric models. This package is a Julia port of the original Python CompAir module developed by Inha AADL, maintaining full compatibility while leveraging Julia's performance advantages for numerical computing.","category":"page"},{"location":"index.html#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"index.html#Flow-Analysis","page":"Home","title":"Flow Analysis","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Isentropic Flow Relations: Temperature, pressure, and density ratios for compressible flow\nNormal Shock Waves: Complete shock wave analysis with property ratios and losses\nOblique Shock Waves: Weak shock solutions with θ-β-M relationships\nPrandtl-Meyer Expansion: Expansion wave calculations for supersonic flows\nCone Shock Analysis: Taylor-Maccoll equation solutions for axisymmetric flows","category":"page"},{"location":"index.html#Nozzle-Analysis","page":"Home","title":"Nozzle Analysis","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Quasi-1D Nozzle Flow: Area-Mach number relationships\nMass Flow Calculations: Flow rate computations with choking conditions\nNozzle Performance: Exit conditions and flow characteristics","category":"page"},{"location":"index.html#Atmospheric-Modeling","page":"Home","title":"Atmospheric Modeling","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"US Standard Atmosphere 1976: Complete atmospheric model up to 86km altitude\nAtmospheric Properties: Density, pressure, temperature, speed of sound, and viscosity\nSutherland Viscosity Law: Temperature-dependent dynamic viscosity calculations\nGeopotential Altitude: Conversion between geometric and geopotential altitudes","category":"page"},{"location":"index.html#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using CompAir\n\n# Isentropic flow properties at Mach 2.0\nM = 2.0\nT0_T = t0_over_t(M)      # Total to static temperature ratio\np0_p = p0_over_p(M)      # Total to static pressure ratio\nrho0_rho = rho0_over_rho(M)  # Total to static density ratio\n\nprintln(\"At M = $M:\")\nprintln(\"T₀/T = $(round(T0_T, digits=3))\")\nprintln(\"p₀/p = $(round(p0_p, digits=3))\")\nprintln(\"ρ₀/ρ = $(round(rho0_rho, digits=3))\")","category":"page"},{"location":"index.html#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To get started with CompAir.jl:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Installation: Install the package and its dependencies\nQuick Start: Basic usage patterns and simple examples\nExamples: Comprehensive examples for different flow scenarios\nFunction Reference: Detailed function documentation in source code","category":"page"},{"location":"index.html#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"manual/installation.md\",\n    \"manual/quickstart.md\", \n    \"manual/examples.md\",\n    \"dev/contributing.md\",\n    \"dev/changelog.md\"\n]\nDepth = 2","category":"page"},{"location":"index.html#Key-Functions","page":"Home","title":"Key Functions","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CompAir.jl provides functions organized into several modules for different aspects of compressible flow analysis. See the API Reference for complete documentation.","category":"page"},{"location":"index.html#Core-Functionality","page":"Home","title":"Core Functionality","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Isentropic Relations: t0_over_t, p0_over_p, rho0_over_rho\nShock Wave Analysis: solve_normal, solve_oblique\nExpansion Waves: expand_mach2, expand_p2\nAtmospheric Model: atmos1976_at, sutherland_mu\nNozzle Analysis: area_ratio_at, mach_by_area_ratio\nCone Shock Analysis: cone_beta_weak, cone_mach_surface","category":"page"},{"location":"index.html#About-This-Package","page":"Home","title":"About This Package","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This Julia package is a faithful port of the original Python CompAir module developed by Inha AADL. The porting process involved algorithm translation, performance optimization, type system enhancement, and critical bug fixes in the atmospheric model and parameter handling.","category":"page"},{"location":"index.html#Key-Improvements","page":"Home","title":"Key Improvements","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Numerical Accuracy: Fixed critical indexing errors in the US Standard Atmosphere 1976 implementation\nParameter Consistency: Resolved missing gamma parameters in shock wave functions\nPerformance: Significant speed improvements through Julia's numerical computing optimizations\nType Safety: Enhanced reliability through Julia's strong type system\nError Handling: Improved error messages and edge case management","category":"page"},{"location":"index.html#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"If you use CompAir.jl in your research, please cite both the original Python module and this Julia port:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"@software{CompAir_jl,\n  author = {Lee, Seawhan},\n  title = {CompAir.jl: A Julia Port of CompAir for Computational Aerodynamics},\n  url = {https://github.com/seawhanlee/CompAir.jl},\n  version = {1.0.0},\n  year = {2024},\n  note = {Julia port of the original Python CompAir module by Inha AADL}\n}","category":"page"},{"location":"index.html#License","page":"Home","title":"License","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This project is licensed under the MIT License.","category":"page"}]
}
